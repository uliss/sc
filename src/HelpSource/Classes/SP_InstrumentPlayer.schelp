TITLE:: SP_InstrumentPlayer
summary:: interface for Instr
categories:: Libraries>splib
related:: Classes/NodeJS, Classes/Instr

DESCRIPTION::
interface for link::Classes/Instr::


CLASSMETHODS::

METHOD:: new
creates new instance

ARGUMENT::
instrument name or instance of link::Classes/Instr::

returns:: this


INSTANCEMETHODS::

METHOD:: release
release instrument with fadeout

ARGUMENT::
fadeout time

METHOD:: set
sets instrument parameters

code::
n = SP_InstrumentPlayer.new("utils.tone")
n.play
n.set(\amp, 0.5, \freq, 450)
n.set(\freq, 380)
n.release
::

ARGUMENT::
instrument parameters

returns:: this

METHOD:: instr
instrument name

METHOD:: instrumentGui
calls link::Classes/Instr#-gui:: gui

code::
n = SP_InstrumentPlayer.new("utils.tone")
n.instrumentGui
::

METHOD:: playerGui
calls link::Classes/Patch#-gui:: gui

code::
n = SP_InstrumentPlayer.new("utils.tone")
n.playerGui
::

METHOD:: play
plays link::Classes/Instr::

code::
n = SP_InstrumentPlayer.new("utils.tone")
n.play(\amp, 0.5, \freq, 450)
n.release
::

ARGUMENT::
instrument parameters.

METHOD:: stop
stops playing

METHOD:: initArgs
static arguments for instrument, that can not be changed after play start

METHOD:: player
link::Classes/Patch:: player property

METHOD:: outChannel
audio output channel property

code::
n = SP_InstrumentPlayer.new("utils.tone")
n.play
n.stop

n.outChannel = 0
n.play
n.stop

n.outChannel = 1
n.play
n.stop

n.outChannel = 2
n.play
n.stop
::

METHOD:: numChannels
Returns number of output channels if instrument has output specs.

CODE::
n = SP_InstrumentPlayer.new("utils.tone")
n.numChannels
::

RETURNS::
number of output channels or STRONG::nil::

METHOD:: dumpInfo
prints instrument information to console

PRIVATE:: init, setInitArg
